
USART - Demo Print.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000bba  00000c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000427  0080010c  0080010c  00000c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038cf  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001292  00000000  00000000  0000479b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc3  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  000069f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b47  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c88  00000000  00000000  00007c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00009923  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__dtors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_16>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_18>
  4c:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_19>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_28>
  74:	0c 94 16 03 	jmp	0x62c	; 0x62c <__vector_29>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000b4 <__ctors_start>:
  b4:	a7 02       	muls	r26, r23
  b6:	3c 03       	fmul	r19, r20

000000b8 <__ctors_end>:
  b8:	ae 02       	muls	r26, r30
  ba:	43 03       	mulsu	r20, r19

000000bc <__dtors_end>:
  bc:	11 24       	eor	r1, r1
  be:	1f be       	out	0x3f, r1	; 63
  c0:	cf ef       	ldi	r28, 0xFF	; 255
  c2:	d8 e0       	ldi	r29, 0x08	; 8
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	ea eb       	ldi	r30, 0xBA	; 186
  d0:	fb e0       	ldi	r31, 0x0B	; 11
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
  d4:	05 90       	lpm	r0, Z+
  d6:	0d 92       	st	X+, r0
  d8:	ac 30       	cpi	r26, 0x0C	; 12
  da:	b1 07       	cpc	r27, r17
  dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
  de:	25 e0       	ldi	r18, 0x05	; 5
  e0:	ac e0       	ldi	r26, 0x0C	; 12
  e2:	b1 e0       	ldi	r27, 0x01	; 1
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
  e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
  e8:	a3 33       	cpi	r26, 0x33	; 51
  ea:	b2 07       	cpc	r27, r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>

000000ee <__do_global_ctors>:
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	cc e5       	ldi	r28, 0x5C	; 92
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <__do_global_ctors+0x10>
  f6:	21 97       	sbiw	r28, 0x01	; 1
  f8:	fe 01       	movw	r30, r28
  fa:	0e 94 ca 05 	call	0xb94	; 0xb94 <__tablejump2__>
  fe:	ca 35       	cpi	r28, 0x5A	; 90
 100:	d1 07       	cpc	r29, r17
 102:	c9 f7       	brne	.-14     	; 0xf6 <__do_global_ctors+0x8>
 104:	0e 94 4a 03 	call	0x694	; 0x694 <main>
 108:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__do_global_dtors>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <_ZN8__Time__5beginEv>:
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
 110:	fc 01       	movw	r30, r24
 112:	20 81       	ld	r18, Z
 114:	21 11       	cpse	r18, r1
 116:	14 c0       	rjmp	.+40     	; 0x140 <_ZN8__Time__5beginEv+0x30>
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	20 83       	st	Z, r18
 11c:	f8 94       	cli
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	88 23       	and	r24, r24
 122:	69 f0       	breq	.+26     	; 0x13e <_ZN8__Time__5beginEv+0x2e>
 124:	85 b5       	in	r24, 0x25	; 37
 126:	8a 7f       	andi	r24, 0xFA	; 250
 128:	85 bd       	out	0x25, r24	; 37
 12a:	85 b5       	in	r24, 0x25	; 37
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	85 bd       	out	0x25, r24	; 37
 130:	ee e6       	ldi	r30, 0x6E	; 110
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	f1 cf       	rjmp	.-30     	; 0x120 <_ZN8__Time__5beginEv+0x10>
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <_ZN8__Time__3irqEv>:
    }
}

void __Time__::irq(void)
{
    this->counter = (this->counter + TIME_INCREMENT_VALUE);
 142:	fc 01       	movw	r30, r24
 144:	41 81       	ldd	r20, Z+1	; 0x01
 146:	52 81       	ldd	r21, Z+2	; 0x02
 148:	63 81       	ldd	r22, Z+3	; 0x03
 14a:	74 81       	ldd	r23, Z+4	; 0x04
 14c:	40 58       	subi	r20, 0x80	; 128
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	6f 4f       	sbci	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	41 83       	std	Z+1, r20	; 0x01
 156:	52 83       	std	Z+2, r21	; 0x02
 158:	63 83       	std	Z+3, r22	; 0x03
 15a:	74 83       	std	Z+4, r23	; 0x04
 15c:	08 95       	ret

0000015e <__vector_16>:
Purpose:  Handling interrupts of Timer COMPA
Input:    Interrupt vector
Return:   None
************************/
ISR(TIMER0_OVF_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
    Time.irq();
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 a1 00 	call	0x142	; 0x142 <_ZN8__Time__3irqEv>
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>:
    /* Disable <RX>, <RX-IRQ>, <TX> */
    #if defined(__AVR_ATmega328P__) || \
        defined(__AVR_ATmega328PB__) || \
        defined(__AVR_ATmega2560__)
    /* Enable TX interrupt */
    *(this->ucsrb) = *(this->ucsrb)  & ~((1 << RXEN0) | (1 << RXCIE0) | (1 << TXEN0));
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	fc 01       	movw	r30, r24
 1b8:	72 83       	std	Z+2, r23	; 0x02
 1ba:	61 83       	std	Z+1, r22	; 0x01
 1bc:	54 83       	std	Z+4, r21	; 0x04
 1be:	43 83       	std	Z+3, r20	; 0x03
 1c0:	36 83       	std	Z+6, r19	; 0x06
 1c2:	25 83       	std	Z+5, r18	; 0x05
 1c4:	10 87       	std	Z+8, r17	; 0x08
 1c6:	07 83       	std	Z+7, r16	; 0x07
 1c8:	f2 86       	std	Z+10, r15	; 0x0a
 1ca:	e1 86       	std	Z+9, r14	; 0x09
 1cc:	d4 86       	std	Z+12, r13	; 0x0c
 1ce:	c3 86       	std	Z+11, r12	; 0x0b
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <_ZN9__USART__D1Ev>:
 1de:	fc 01       	movw	r30, r24
 1e0:	12 82       	std	Z+2, r1	; 0x02
 1e2:	11 82       	std	Z+1, r1	; 0x01
 1e4:	14 82       	std	Z+4, r1	; 0x04
 1e6:	13 82       	std	Z+3, r1	; 0x03
 1e8:	16 82       	std	Z+6, r1	; 0x06
 1ea:	15 82       	std	Z+5, r1	; 0x05
 1ec:	10 86       	std	Z+8, r1	; 0x08
 1ee:	17 82       	std	Z+7, r1	; 0x07
 1f0:	12 86       	std	Z+10, r1	; 0x0a
 1f2:	11 86       	std	Z+9, r1	; 0x09
 1f4:	14 86       	std	Z+12, r1	; 0x0c
 1f6:	13 86       	std	Z+11, r1	; 0x0b
 1f8:	08 95       	ret

000001fa <_ZN9__USART__5beginEm>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	fc 01       	movw	r30, r24
 204:	20 81       	ld	r18, Z
 206:	21 11       	cpse	r18, r1
 208:	3c c0       	rjmp	.+120    	; 0x282 <_ZN9__USART__5beginEm+0x88>
 20a:	ec 01       	movw	r28, r24
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 83       	st	Z, r24
 210:	cb 01       	movw	r24, r22
 212:	ba 01       	movw	r22, r20
 214:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e8       	ldi	r20, 0x80	; 128
 21e:	51 e4       	ldi	r21, 0x41	; 65
 220:	0e 94 10 05 	call	0xa20	; 0xa20 <__mulsf3>
 224:	9b 01       	movw	r18, r22
 226:	ac 01       	movw	r20, r24
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	74 e2       	ldi	r23, 0x24	; 36
 22c:	84 e7       	ldi	r24, 0x74	; 116
 22e:	9b e4       	ldi	r25, 0x4B	; 75
 230:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5f e3       	ldi	r21, 0x3F	; 63
 23c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 240:	0e 94 7d 05 	call	0xafa	; 0xafa <round>
 244:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 248:	06 2f       	mov	r16, r22
 24a:	17 2f       	mov	r17, r23
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8__Time__5beginEv>
 254:	f8 94       	cli
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	88 23       	and	r24, r24
 25a:	91 f0       	breq	.+36     	; 0x280 <_ZN9__USART__5beginEm+0x86>
 25c:	e9 81       	ldd	r30, Y+1	; 0x01
 25e:	fa 81       	ldd	r31, Y+2	; 0x02
 260:	10 83       	st	Z, r17
 262:	eb 81       	ldd	r30, Y+3	; 0x03
 264:	fc 81       	ldd	r31, Y+4	; 0x04
 266:	00 83       	st	Z, r16
 268:	e9 85       	ldd	r30, Y+9	; 0x09
 26a:	fa 85       	ldd	r31, Y+10	; 0x0a
 26c:	80 81       	ld	r24, Z
 26e:	86 60       	ori	r24, 0x06	; 6
 270:	80 83       	st	Z, r24
 272:	ef 81       	ldd	r30, Y+7	; 0x07
 274:	f8 85       	ldd	r31, Y+8	; 0x08
 276:	80 81       	ld	r24, Z
 278:	88 69       	ori	r24, 0x98	; 152
 27a:	80 83       	st	Z, r24
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	ec cf       	rjmp	.-40     	; 0x258 <_ZN9__USART__5beginEm+0x5e>
 280:	78 94       	sei
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <_ZN9__USART__9availableEv>:
 28c:	9c 01       	movw	r18, r24
 28e:	4f b7       	in	r20, 0x3f	; 63
 290:	f8 94       	cli
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	99 23       	and	r25, r25
 298:	49 f0       	breq	.+18     	; 0x2ac <_ZN9__USART__9availableEv+0x20>
 29a:	f9 01       	movw	r30, r18
 29c:	e3 5f       	subi	r30, 0xF3	; 243
 29e:	fd 4f       	sbci	r31, 0xFD	; 253
 2a0:	80 81       	ld	r24, Z
 2a2:	31 96       	adiw	r30, 0x01	; 1
 2a4:	90 81       	ld	r25, Z
 2a6:	89 1b       	sub	r24, r25
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	f5 cf       	rjmp	.-22     	; 0x296 <_ZN9__USART__9availableEv+0xa>
 2ac:	4f bf       	out	0x3f, r20	; 63
 2ae:	08 95       	ret

000002b0 <_ZN9__USART__4readEv>:
 2b0:	fc 01       	movw	r30, r24
 2b2:	e3 5f       	subi	r30, 0xF3	; 243
 2b4:	fd 4f       	sbci	r31, 0xFD	; 253
 2b6:	30 81       	ld	r19, Z
 2b8:	31 96       	adiw	r30, 0x01	; 1
 2ba:	20 81       	ld	r18, Z
 2bc:	32 17       	cp	r19, r18
 2be:	51 f0       	breq	.+20     	; 0x2d4 <_ZN9__USART__4readEv+0x24>
 2c0:	20 81       	ld	r18, Z
 2c2:	dc 01       	movw	r26, r24
 2c4:	a2 0f       	add	r26, r18
 2c6:	b1 1d       	adc	r27, r1
 2c8:	1d 96       	adiw	r26, 0x0d	; 13
 2ca:	8c 91       	ld	r24, X
 2cc:	90 81       	ld	r25, Z
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	90 83       	st	Z, r25
 2d2:	08 95       	ret
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <_ZN9__USART__5writeEh>:
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	dc 01       	movw	r26, r24
 2de:	fc 01       	movw	r30, r24
 2e0:	e1 5f       	subi	r30, 0xF1	; 241
 2e2:	fd 4f       	sbci	r31, 0xFD	; 253
 2e4:	80 81       	ld	r24, Z
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	fd 01       	movw	r30, r26
 2ea:	e0 5f       	subi	r30, 0xF0	; 240
 2ec:	fd 4f       	sbci	r31, 0xFD	; 253
 2ee:	90 81       	ld	r25, Z
 2f0:	89 17       	cp	r24, r25
 2f2:	d1 f3       	breq	.-12     	; 0x2e8 <_ZN9__USART__5writeEh+0x10>
 2f4:	ed 01       	movw	r28, r26
 2f6:	c1 5f       	subi	r28, 0xF1	; 241
 2f8:	dd 4f       	sbci	r29, 0xFD	; 253
 2fa:	98 81       	ld	r25, Y
 2fc:	fd 01       	movw	r30, r26
 2fe:	e9 0f       	add	r30, r25
 300:	f1 1d       	adc	r31, r1
 302:	e3 5f       	subi	r30, 0xF3	; 243
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	60 83       	st	Z, r22
 308:	88 83       	st	Y, r24
 30a:	17 96       	adiw	r26, 0x07	; 7
 30c:	ed 91       	ld	r30, X+
 30e:	fc 91       	ld	r31, X
 310:	18 97       	sbiw	r26, 0x08	; 8
 312:	80 81       	ld	r24, Z
 314:	80 62       	ori	r24, 0x20	; 32
 316:	80 83       	st	Z, r24
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <_ZN9__USART__5printEc>:
 31e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN9__USART__5writeEh>
 322:	08 95       	ret

00000324 <_ZN9__USART__5printEPKc>:
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	8c 01       	movw	r16, r24
 32e:	eb 01       	movw	r28, r22
 330:	68 81       	ld	r22, Y
 332:	66 23       	and	r22, r22
 334:	29 f0       	breq	.+10     	; 0x340 <_ZN9__USART__5printEPKc+0x1c>
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN9__USART__5printEc>
 33e:	f8 cf       	rjmp	.-16     	; 0x330 <_ZN9__USART__5printEPKc+0xc>
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	0f 91       	pop	r16
 348:	08 95       	ret

0000034a <_ZN9__USART__5printEh>:
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	8c 01       	movw	r16, r24
 352:	c6 2f       	mov	r28, r22
 354:	64 36       	cpi	r22, 0x64	; 100
 356:	48 f0       	brcs	.+18     	; 0x36a <_ZN9__USART__5printEh+0x20>
 358:	69 e2       	ldi	r22, 0x29	; 41
 35a:	c6 9f       	mul	r28, r22
 35c:	61 2d       	mov	r22, r1
 35e:	11 24       	eor	r1, r1
 360:	62 95       	swap	r22
 362:	6f 70       	andi	r22, 0x0F	; 15
 364:	60 5d       	subi	r22, 0xD0	; 208
 366:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN9__USART__5printEc>
 36a:	ca 30       	cpi	r28, 0x0A	; 10
 36c:	b8 f0       	brcs	.+46     	; 0x39c <_ZN9__USART__5printEh+0x52>
 36e:	8d ec       	ldi	r24, 0xCD	; 205
 370:	c8 9f       	mul	r28, r24
 372:	61 2d       	mov	r22, r1
 374:	11 24       	eor	r1, r1
 376:	66 95       	lsr	r22
 378:	66 95       	lsr	r22
 37a:	66 95       	lsr	r22
 37c:	68 9f       	mul	r22, r24
 37e:	81 2d       	mov	r24, r1
 380:	11 24       	eor	r1, r1
 382:	86 95       	lsr	r24
 384:	86 95       	lsr	r24
 386:	86 95       	lsr	r24
 388:	88 0f       	add	r24, r24
 38a:	98 2f       	mov	r25, r24
 38c:	99 0f       	add	r25, r25
 38e:	99 0f       	add	r25, r25
 390:	89 0f       	add	r24, r25
 392:	68 1b       	sub	r22, r24
 394:	60 5d       	subi	r22, 0xD0	; 208
 396:	c8 01       	movw	r24, r16
 398:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN9__USART__5printEc>
 39c:	8d ec       	ldi	r24, 0xCD	; 205
 39e:	c8 9f       	mul	r28, r24
 3a0:	81 2d       	mov	r24, r1
 3a2:	11 24       	eor	r1, r1
 3a4:	86 95       	lsr	r24
 3a6:	86 95       	lsr	r24
 3a8:	86 95       	lsr	r24
 3aa:	88 0f       	add	r24, r24
 3ac:	98 2f       	mov	r25, r24
 3ae:	99 0f       	add	r25, r25
 3b0:	99 0f       	add	r25, r25
 3b2:	89 0f       	add	r24, r25
 3b4:	6c 2f       	mov	r22, r28
 3b6:	68 1b       	sub	r22, r24
 3b8:	60 5d       	subi	r22, 0xD0	; 208
 3ba:	c8 01       	movw	r24, r16
 3bc:	0e 94 8f 01 	call	0x31e	; 0x31e <_ZN9__USART__5printEc>
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <_ZN9__USART__5rxIRQEv>:
Purpose:  RX interrupt call
Input:    None
Return:   None
***************************************************/
void __USART__::rxIRQ(void)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
    /* Read data into buffer */
    this->rxBuffer[this->rxHead] = *(this->udr);
 3cc:	fc 01       	movw	r30, r24
 3ce:	e3 5f       	subi	r30, 0xF3	; 243
 3d0:	fd 4f       	sbci	r31, 0xFD	; 253
 3d2:	30 81       	ld	r19, Z
 3d4:	ec 01       	movw	r28, r24
 3d6:	ab 85       	ldd	r26, Y+11	; 0x0b
 3d8:	bc 85       	ldd	r27, Y+12	; 0x0c
 3da:	2c 91       	ld	r18, X
 3dc:	dc 01       	movw	r26, r24
 3de:	a3 0f       	add	r26, r19
 3e0:	b1 1d       	adc	r27, r1
 3e2:	1d 96       	adiw	r26, 0x0d	; 13
 3e4:	2c 93       	st	X, r18
    /* Increase head */
    this->rxHead = (this->rxHead + 1) & USART_DEFAULT_RX_BUFFER_MASK;
 3e6:	80 81       	ld	r24, Z
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	80 83       	st	Z, r24
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <_ZN9__USART__5txIRQEv>:
Purpose:  TX interrupt call
Input:    None
Return:   None
***************************************************/
void __USART__::txIRQ(void)
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
    /* If data is available into buffer */
    if (this->txHead != this->txTail)
 3f6:	fc 01       	movw	r30, r24
 3f8:	e1 5f       	subi	r30, 0xF1	; 241
 3fa:	fd 4f       	sbci	r31, 0xFD	; 253
 3fc:	30 81       	ld	r19, Z
 3fe:	31 96       	adiw	r30, 0x01	; 1
 400:	20 81       	ld	r18, Z
 402:	32 17       	cp	r19, r18
 404:	91 f0       	breq	.+36     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
    {
        /* Load data from buffer */
        *(this->udr) = this->txBuffer[this->txTail];
 406:	dc 01       	movw	r26, r24
 408:	1b 96       	adiw	r26, 0x0b	; 11
 40a:	cd 91       	ld	r28, X+
 40c:	dc 91       	ld	r29, X
 40e:	1c 97       	sbiw	r26, 0x0c	; 12
 410:	df 01       	movw	r26, r30
 412:	20 81       	ld	r18, Z
 414:	82 0f       	add	r24, r18
 416:	91 1d       	adc	r25, r1
 418:	fc 01       	movw	r30, r24
 41a:	e3 5f       	subi	r30, 0xF3	; 243
 41c:	fe 4f       	sbci	r31, 0xFE	; 254
 41e:	80 81       	ld	r24, Z
 420:	88 83       	st	Y, r24
        /* Increase tail */
        this->txTail = (this->txTail + 1) & USART_DEFAULT_TX_BUFFER_MASK;
 422:	8c 91       	ld	r24, X
 424:	8f 5f       	subi	r24, 0xFF	; 255
 426:	8c 93       	st	X, r24
 428:	08 c0       	rjmp	.+16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
    }
    /* Else there's no data into buffer */
    else
        /* Disable TX interrupt */
        *(this->ucsrb) = *(this->ucsrb) & ~(1 << UDRIE0); 
 42a:	dc 01       	movw	r26, r24
 42c:	17 96       	adiw	r26, 0x07	; 7
 42e:	ed 91       	ld	r30, X+
 430:	fc 91       	ld	r31, X
 432:	18 97       	sbiw	r26, 0x08	; 8
 434:	80 81       	ld	r24, Z
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	80 83       	st	Z, r24
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <_Z41__static_initialization_and_destruction_0ii>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#endif
{
    USART.txIRQ();
}
 440:	af 92       	push	r10
 442:	bf 92       	push	r11
 444:	cf 92       	push	r12
 446:	df 92       	push	r13
 448:	ef 92       	push	r14
 44a:	ff 92       	push	r15
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
 456:	5b 01       	movw	r10, r22
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	c9 f4       	brne	.+50     	; 0x48e <_Z41__static_initialization_and_destruction_0ii+0x4e>
 45c:	6f 3f       	cpi	r22, 0xFF	; 255
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	b1 f4       	brne	.+44     	; 0x48e <_Z41__static_initialization_and_destruction_0ii+0x4e>
/* Dependencies */
#include "USART.h"

#if defined(HAS_USART)

__USART__ USART = __USART__(&UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0);
 462:	0f 2e       	mov	r0, r31
 464:	f6 ec       	ldi	r31, 0xC6	; 198
 466:	cf 2e       	mov	r12, r31
 468:	d1 2c       	mov	r13, r1
 46a:	f0 2d       	mov	r31, r0
 46c:	0f 2e       	mov	r0, r31
 46e:	f2 ec       	ldi	r31, 0xC2	; 194
 470:	ef 2e       	mov	r14, r31
 472:	f1 2c       	mov	r15, r1
 474:	f0 2d       	mov	r31, r0
 476:	01 ec       	ldi	r16, 0xC1	; 193
 478:	10 e0       	ldi	r17, 0x00	; 0
 47a:	20 ec       	ldi	r18, 0xC0	; 192
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	44 ec       	ldi	r20, 0xC4	; 196
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	65 ec       	ldi	r22, 0xC5	; 197
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	81 e1       	ldi	r24, 0x11	; 17
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>
 48e:	cd 2b       	or	r28, r29
 490:	39 f4       	brne	.+14     	; 0x4a0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 492:	ab 20       	and	r10, r11
 494:	a0 94       	com	r10
 496:	21 f4       	brne	.+8      	; 0x4a0 <_Z41__static_initialization_and_destruction_0ii+0x60>
 498:	81 e1       	ldi	r24, 0x11	; 17
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN9__USART__D1Ev>
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#endif
{
    USART.txIRQ();
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	08 95       	ret

000004b6 <__vector_18>:
#if defined(USART_TX_vect)
ISR(USART_RX_vect)
#elif defined(USART0_TX_vect)
ISR(USART0_RX_vect)
#endif
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
    USART.rxIRQ();
 4d8:	81 e1       	ldi	r24, 0x11	; 17
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN9__USART__5rxIRQEv>
}
 4e0:	ff 91       	pop	r31
 4e2:	ef 91       	pop	r30
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_19>:
#if defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#endif
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	4f 93       	push	r20
 512:	5f 93       	push	r21
 514:	6f 93       	push	r22
 516:	7f 93       	push	r23
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
    USART.txIRQ();
 524:	81 e1       	ldi	r24, 0x11	; 17
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN9__USART__5txIRQEv>
}
 52c:	ff 91       	pop	r31
 52e:	ef 91       	pop	r30
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	0f 90       	pop	r0
 546:	0f be       	out	0x3f, r0	; 63
 548:	0f 90       	pop	r0
 54a:	1f 90       	pop	r1
 54c:	18 95       	reti

0000054e <_GLOBAL__sub_I_USART>:
 54e:	6f ef       	ldi	r22, 0xFF	; 255
 550:	7f ef       	ldi	r23, 0xFF	; 255
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 20 02 	call	0x440	; 0x440 <_Z41__static_initialization_and_destruction_0ii>
 55a:	08 95       	ret

0000055c <_GLOBAL__sub_D_USART>:
 55c:	6f ef       	ldi	r22, 0xFF	; 255
 55e:	7f ef       	ldi	r23, 0xFF	; 255
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 20 02 	call	0x440	; 0x440 <_Z41__static_initialization_and_destruction_0ii>
 568:	08 95       	ret

0000056a <_Z41__static_initialization_and_destruction_0ii>:
ISR(USART1_UDRE_vect)
{
    USART1.txIRQ();
}

__USART__ USART1 = __USART__(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);
 56a:	af 92       	push	r10
 56c:	bf 92       	push	r11
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	ec 01       	movw	r28, r24
 580:	5b 01       	movw	r10, r22
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	c9 f4       	brne	.+50     	; 0x5b8 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 586:	6f 3f       	cpi	r22, 0xFF	; 255
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	b1 f4       	brne	.+44     	; 0x5b8 <_Z41__static_initialization_and_destruction_0ii+0x4e>
 58c:	0f 2e       	mov	r0, r31
 58e:	fe ec       	ldi	r31, 0xCE	; 206
 590:	cf 2e       	mov	r12, r31
 592:	d1 2c       	mov	r13, r1
 594:	f0 2d       	mov	r31, r0
 596:	0f 2e       	mov	r0, r31
 598:	fa ec       	ldi	r31, 0xCA	; 202
 59a:	ef 2e       	mov	r14, r31
 59c:	f1 2c       	mov	r15, r1
 59e:	f0 2d       	mov	r31, r0
 5a0:	09 ec       	ldi	r16, 0xC9	; 201
 5a2:	10 e0       	ldi	r17, 0x00	; 0
 5a4:	28 ec       	ldi	r18, 0xC8	; 200
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	4c ec       	ldi	r20, 0xCC	; 204
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	6d ec       	ldi	r22, 0xCD	; 205
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	82 e2       	ldi	r24, 0x22	; 34
 5b2:	93 e0       	ldi	r25, 0x03	; 3
 5b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN9__USART__C1EPVhS1_S1_S1_S1_S1_>
 5b8:	cd 2b       	or	r28, r29
 5ba:	39 f4       	brne	.+14     	; 0x5ca <_Z41__static_initialization_and_destruction_0ii+0x60>
 5bc:	ab 20       	and	r10, r11
 5be:	a0 94       	com	r10
 5c0:	21 f4       	brne	.+8      	; 0x5ca <_Z41__static_initialization_and_destruction_0ii+0x60>
 5c2:	82 e2       	ldi	r24, 0x22	; 34
 5c4:	93 e0       	ldi	r25, 0x03	; 3
 5c6:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN9__USART__D1Ev>
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	ef 90       	pop	r14
 5d6:	df 90       	pop	r13
 5d8:	cf 90       	pop	r12
 5da:	bf 90       	pop	r11
 5dc:	af 90       	pop	r10
 5de:	08 95       	ret

000005e0 <__vector_28>:
Purpose:  Handling interrupts of USART RX
Input:    Interrupt vector
Return:   None
************************/
ISR(USART1_RX_vect)
{
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
    USART1.rxIRQ();
 602:	82 e2       	ldi	r24, 0x22	; 34
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN9__USART__5rxIRQEv>
}
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <__vector_29>:
Purpose:  Handling interrupts of USART TX
Input:    Interrupt vector
Return:   None
************************/
ISR(USART1_UDRE_vect)
{
 62c:	1f 92       	push	r1
 62e:	0f 92       	push	r0
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	0f 92       	push	r0
 634:	11 24       	eor	r1, r1
 636:	2f 93       	push	r18
 638:	3f 93       	push	r19
 63a:	4f 93       	push	r20
 63c:	5f 93       	push	r21
 63e:	6f 93       	push	r22
 640:	7f 93       	push	r23
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
 64a:	ef 93       	push	r30
 64c:	ff 93       	push	r31
    USART1.txIRQ();
 64e:	82 e2       	ldi	r24, 0x22	; 34
 650:	93 e0       	ldi	r25, 0x03	; 3
 652:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_ZN9__USART__5txIRQEv>
}
 656:	ff 91       	pop	r31
 658:	ef 91       	pop	r30
 65a:	bf 91       	pop	r27
 65c:	af 91       	pop	r26
 65e:	9f 91       	pop	r25
 660:	8f 91       	pop	r24
 662:	7f 91       	pop	r23
 664:	6f 91       	pop	r22
 666:	5f 91       	pop	r21
 668:	4f 91       	pop	r20
 66a:	3f 91       	pop	r19
 66c:	2f 91       	pop	r18
 66e:	0f 90       	pop	r0
 670:	0f be       	out	0x3f, r0	; 63
 672:	0f 90       	pop	r0
 674:	1f 90       	pop	r1
 676:	18 95       	reti

00000678 <_GLOBAL__sub_I___vector_28>:

__USART__ USART1 = __USART__(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);
 678:	6f ef       	ldi	r22, 0xFF	; 255
 67a:	7f ef       	ldi	r23, 0xFF	; 255
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z41__static_initialization_and_destruction_0ii>
 684:	08 95       	ret

00000686 <_GLOBAL__sub_D___vector_28>:
 686:	6f ef       	ldi	r22, 0xFF	; 255
 688:	7f ef       	ldi	r23, 0xFF	; 255
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z41__static_initialization_and_destruction_0ii>
 692:	08 95       	ret

00000694 <main>:
/* Dependencies */
#include "USART\USART.h"

int main(void)
{
	Time.begin();
 694:	8c e0       	ldi	r24, 0x0C	; 12
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	0e 94 88 00 	call	0x110	; 0x110 <_ZN8__Time__5beginEv>
    {
		USART1.write((uint8_t)10);
		Time.delay(1);
    }
	*/
		USART.begin(115200);
 69c:	40 e0       	ldi	r20, 0x00	; 0
 69e:	52 ec       	ldi	r21, 0xC2	; 194
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	81 e1       	ldi	r24, 0x11	; 17
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN9__USART__5beginEm>
		USART1.begin(9600);
 6ac:	40 e8       	ldi	r20, 0x80	; 128
 6ae:	55 e2       	ldi	r21, 0x25	; 37
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	82 e2       	ldi	r24, 0x22	; 34
 6b6:	93 e0       	ldi	r25, 0x03	; 3
 6b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <_ZN9__USART__5beginEm>
		USART.print("RS485 Slave");
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	71 e0       	ldi	r23, 0x01	; 1
 6c0:	81 e1       	ldi	r24, 0x11	; 17
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 92 01 	call	0x324	; 0x324 <_ZN9__USART__5printEPKc>
		while (1)
		{
			if (USART1.available())
 6c8:	82 e2       	ldi	r24, 0x22	; 34
 6ca:	93 e0       	ldi	r25, 0x03	; 3
 6cc:	0e 94 46 01 	call	0x28c	; 0x28c <_ZN9__USART__9availableEv>
 6d0:	88 23       	and	r24, r24
 6d2:	d1 f3       	breq	.-12     	; 0x6c8 <main+0x34>
			{
				const uint8_t byte = USART1.read();
 6d4:	82 e2       	ldi	r24, 0x22	; 34
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_ZN9__USART__4readEv>
				USART.print(byte);
 6dc:	68 2f       	mov	r22, r24
 6de:	81 e1       	ldi	r24, 0x11	; 17
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 a5 01 	call	0x34a	; 0x34a <_ZN9__USART__5printEh>
 6e6:	f0 cf       	rjmp	.-32     	; 0x6c8 <main+0x34>

000006e8 <__subsf3>:
 6e8:	50 58       	subi	r21, 0x80	; 128

000006ea <__addsf3>:
 6ea:	bb 27       	eor	r27, r27
 6ec:	aa 27       	eor	r26, r26
 6ee:	0e 94 8c 03 	call	0x718	; 0x718 <__addsf3x>
 6f2:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 6f6:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__addsf3+0x20>
 6fc:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 700:	20 f0       	brcs	.+8      	; 0x70a <__addsf3+0x20>
 702:	39 f4       	brne	.+14     	; 0x712 <__addsf3+0x28>
 704:	9f 3f       	cpi	r25, 0xFF	; 255
 706:	19 f4       	brne	.+6      	; 0x70e <__addsf3+0x24>
 708:	26 f4       	brtc	.+8      	; 0x712 <__addsf3+0x28>
 70a:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>
 70e:	0e f4       	brtc	.+2      	; 0x712 <__addsf3+0x28>
 710:	e0 95       	com	r30
 712:	e7 fb       	bst	r30, 7
 714:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>

00000718 <__addsf3x>:
 718:	e9 2f       	mov	r30, r25
 71a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 71e:	58 f3       	brcs	.-42     	; 0x6f6 <__addsf3+0xc>
 720:	ba 17       	cp	r27, r26
 722:	62 07       	cpc	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	95 07       	cpc	r25, r21
 72a:	20 f0       	brcs	.+8      	; 0x734 <__addsf3x+0x1c>
 72c:	79 f4       	brne	.+30     	; 0x74c <__addsf3x+0x34>
 72e:	a6 f5       	brtc	.+104    	; 0x798 <__addsf3x+0x80>
 730:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_zero>
 734:	0e f4       	brtc	.+2      	; 0x738 <__addsf3x+0x20>
 736:	e0 95       	com	r30
 738:	0b 2e       	mov	r0, r27
 73a:	ba 2f       	mov	r27, r26
 73c:	a0 2d       	mov	r26, r0
 73e:	0b 01       	movw	r0, r22
 740:	b9 01       	movw	r22, r18
 742:	90 01       	movw	r18, r0
 744:	0c 01       	movw	r0, r24
 746:	ca 01       	movw	r24, r20
 748:	a0 01       	movw	r20, r0
 74a:	11 24       	eor	r1, r1
 74c:	ff 27       	eor	r31, r31
 74e:	59 1b       	sub	r21, r25
 750:	99 f0       	breq	.+38     	; 0x778 <__addsf3x+0x60>
 752:	59 3f       	cpi	r21, 0xF9	; 249
 754:	50 f4       	brcc	.+20     	; 0x76a <__addsf3x+0x52>
 756:	50 3e       	cpi	r21, 0xE0	; 224
 758:	68 f1       	brcs	.+90     	; 0x7b4 <__addsf3x+0x9c>
 75a:	1a 16       	cp	r1, r26
 75c:	f0 40       	sbci	r31, 0x00	; 0
 75e:	a2 2f       	mov	r26, r18
 760:	23 2f       	mov	r18, r19
 762:	34 2f       	mov	r19, r20
 764:	44 27       	eor	r20, r20
 766:	58 5f       	subi	r21, 0xF8	; 248
 768:	f3 cf       	rjmp	.-26     	; 0x750 <__addsf3x+0x38>
 76a:	46 95       	lsr	r20
 76c:	37 95       	ror	r19
 76e:	27 95       	ror	r18
 770:	a7 95       	ror	r26
 772:	f0 40       	sbci	r31, 0x00	; 0
 774:	53 95       	inc	r21
 776:	c9 f7       	brne	.-14     	; 0x76a <__addsf3x+0x52>
 778:	7e f4       	brtc	.+30     	; 0x798 <__addsf3x+0x80>
 77a:	1f 16       	cp	r1, r31
 77c:	ba 0b       	sbc	r27, r26
 77e:	62 0b       	sbc	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	84 0b       	sbc	r24, r20
 784:	ba f0       	brmi	.+46     	; 0x7b4 <__addsf3x+0x9c>
 786:	91 50       	subi	r25, 0x01	; 1
 788:	a1 f0       	breq	.+40     	; 0x7b2 <__addsf3x+0x9a>
 78a:	ff 0f       	add	r31, r31
 78c:	bb 1f       	adc	r27, r27
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	c2 f7       	brpl	.-16     	; 0x786 <__addsf3x+0x6e>
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <__addsf3x+0x9c>
 798:	ba 0f       	add	r27, r26
 79a:	62 1f       	adc	r22, r18
 79c:	73 1f       	adc	r23, r19
 79e:	84 1f       	adc	r24, r20
 7a0:	48 f4       	brcc	.+18     	; 0x7b4 <__addsf3x+0x9c>
 7a2:	87 95       	ror	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f7 95       	ror	r31
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__addsf3x+0x9a>
 7b0:	b0 cf       	rjmp	.-160    	; 0x712 <__addsf3+0x28>
 7b2:	93 95       	inc	r25
 7b4:	88 0f       	add	r24, r24
 7b6:	08 f0       	brcs	.+2      	; 0x7ba <__addsf3x+0xa2>
 7b8:	99 27       	eor	r25, r25
 7ba:	ee 0f       	add	r30, r30
 7bc:	97 95       	ror	r25
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret

000007c2 <__divsf3>:
 7c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3x>
 7c6:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 7ca:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 7ce:	58 f0       	brcs	.+22     	; 0x7e6 <__divsf3+0x24>
 7d0:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 7d4:	40 f0       	brcs	.+16     	; 0x7e6 <__divsf3+0x24>
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <__divsf3+0x20>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	29 f0       	breq	.+10     	; 0x7e6 <__divsf3+0x24>
 7dc:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 7e0:	51 11       	cpse	r21, r1
 7e2:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 7e6:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>

000007ea <__divsf3x>:
 7ea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 7ee:	68 f3       	brcs	.-38     	; 0x7ca <__divsf3+0x8>

000007f0 <__divsf3_pse>:
 7f0:	99 23       	and	r25, r25
 7f2:	b1 f3       	breq	.-20     	; 0x7e0 <__divsf3+0x1e>
 7f4:	55 23       	and	r21, r21
 7f6:	91 f3       	breq	.-28     	; 0x7dc <__divsf3+0x1a>
 7f8:	95 1b       	sub	r25, r21
 7fa:	55 0b       	sbc	r21, r21
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	62 17       	cp	r22, r18
 802:	73 07       	cpc	r23, r19
 804:	84 07       	cpc	r24, r20
 806:	38 f0       	brcs	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	44 1f       	adc	r20, r20
 812:	aa 1f       	adc	r26, r26
 814:	a9 f3       	breq	.-22     	; 0x800 <__DATA_REGION_LENGTH__>
 816:	35 d0       	rcall	.+106    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 818:	0e 2e       	mov	r0, r30
 81a:	3a f0       	brmi	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81c:	e0 e8       	ldi	r30, 0x80	; 128
 81e:	32 d0       	rcall	.+100    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	e6 95       	lsr	r30
 826:	00 1c       	adc	r0, r0
 828:	ca f7       	brpl	.-14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82a:	2b d0       	rcall	.+86     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 82c:	fe 2f       	mov	r31, r30
 82e:	29 d0       	rcall	.+82     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	bb 1f       	adc	r27, r27
 838:	26 17       	cp	r18, r22
 83a:	37 07       	cpc	r19, r23
 83c:	48 07       	cpc	r20, r24
 83e:	ab 07       	cpc	r26, r27
 840:	b0 e8       	ldi	r27, 0x80	; 128
 842:	09 f0       	breq	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 844:	bb 0b       	sbc	r27, r27
 846:	80 2d       	mov	r24, r0
 848:	bf 01       	movw	r22, r30
 84a:	ff 27       	eor	r31, r31
 84c:	93 58       	subi	r25, 0x83	; 131
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	3a f0       	brmi	.+14     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	78 f0       	brcs	.+30     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 858:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 85c:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	e4 f3       	brlt	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	d4 f3       	brlt	.-12     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	9f 5f       	subi	r25, 0xFF	; 255
 874:	c9 f7       	brne	.-14     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 876:	88 0f       	add	r24, r24
 878:	91 1d       	adc	r25, r1
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret
 882:	e1 e0       	ldi	r30, 0x01	; 1
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	62 17       	cp	r22, r18
 88e:	73 07       	cpc	r23, r19
 890:	84 07       	cpc	r24, r20
 892:	ba 07       	cpc	r27, r26
 894:	20 f0       	brcs	.+8      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 896:	62 1b       	sub	r22, r18
 898:	73 0b       	sbc	r23, r19
 89a:	84 0b       	sbc	r24, r20
 89c:	ba 0b       	sbc	r27, r26
 89e:	ee 1f       	adc	r30, r30
 8a0:	88 f7       	brcc	.-30     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 8a2:	e0 95       	com	r30
 8a4:	08 95       	ret

000008a6 <__fixunssfsi>:
 8a6:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_splitA>
 8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x28>
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fixunssfsi+0x30>
 8b0:	b9 2f       	mov	r27, r25
 8b2:	99 27       	eor	r25, r25
 8b4:	b7 51       	subi	r27, 0x17	; 23
 8b6:	b0 f0       	brcs	.+44     	; 0x8e4 <__fixunssfsi+0x3e>
 8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__fixunssfsi+0x4c>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x24>
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x14>
 8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__fixunssfsi+0x4c>
 8ca:	b1 30       	cpi	r27, 0x01	; 1
 8cc:	91 f0       	breq	.+36     	; 0x8f2 <__fixunssfsi+0x4c>
 8ce:	0e 94 09 05 	call	0xa12	; 0xa12 <__fp_zero>
 8d2:	b1 e0       	ldi	r27, 0x01	; 1
 8d4:	08 95       	ret
 8d6:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_zero>
 8da:	67 2f       	mov	r22, r23
 8dc:	78 2f       	mov	r23, r24
 8de:	88 27       	eor	r24, r24
 8e0:	b8 5f       	subi	r27, 0xF8	; 248
 8e2:	39 f0       	breq	.+14     	; 0x8f2 <__fixunssfsi+0x4c>
 8e4:	b9 3f       	cpi	r27, 0xF9	; 249
 8e6:	cc f3       	brlt	.-14     	; 0x8da <__fixunssfsi+0x34>
 8e8:	86 95       	lsr	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b3 95       	inc	r27
 8f0:	d9 f7       	brne	.-10     	; 0x8e8 <__fixunssfsi+0x42>
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__stack+0x3>
 8f4:	90 95       	com	r25
 8f6:	80 95       	com	r24
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255
 8fe:	8f 4f       	sbci	r24, 0xFF	; 255
 900:	9f 4f       	sbci	r25, 0xFF	; 255
 902:	08 95       	ret

00000904 <__floatunsisf>:
 904:	e8 94       	clt
 906:	09 c0       	rjmp	.+18     	; 0x91a <__floatsisf+0x12>

00000908 <__floatsisf>:
 908:	97 fb       	bst	r25, 7
 90a:	3e f4       	brtc	.+14     	; 0x91a <__floatsisf+0x12>
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	99 23       	and	r25, r25
 91c:	a9 f0       	breq	.+42     	; 0x948 <__floatsisf+0x40>
 91e:	f9 2f       	mov	r31, r25
 920:	96 e9       	ldi	r25, 0x96	; 150
 922:	bb 27       	eor	r27, r27
 924:	93 95       	inc	r25
 926:	f6 95       	lsr	r31
 928:	87 95       	ror	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b7 95       	ror	r27
 930:	f1 11       	cpse	r31, r1
 932:	f8 cf       	rjmp	.-16     	; 0x924 <__floatsisf+0x1c>
 934:	fa f4       	brpl	.+62     	; 0x974 <__floatsisf+0x6c>
 936:	bb 0f       	add	r27, r27
 938:	11 f4       	brne	.+4      	; 0x93e <__floatsisf+0x36>
 93a:	60 ff       	sbrs	r22, 0
 93c:	1b c0       	rjmp	.+54     	; 0x974 <__floatsisf+0x6c>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	16 c0       	rjmp	.+44     	; 0x974 <__floatsisf+0x6c>
 948:	88 23       	and	r24, r24
 94a:	11 f0       	breq	.+4      	; 0x950 <__floatsisf+0x48>
 94c:	96 e9       	ldi	r25, 0x96	; 150
 94e:	11 c0       	rjmp	.+34     	; 0x972 <__floatsisf+0x6a>
 950:	77 23       	and	r23, r23
 952:	21 f0       	breq	.+8      	; 0x95c <__floatsisf+0x54>
 954:	9e e8       	ldi	r25, 0x8E	; 142
 956:	87 2f       	mov	r24, r23
 958:	76 2f       	mov	r23, r22
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__floatsisf+0x5e>
 95c:	66 23       	and	r22, r22
 95e:	71 f0       	breq	.+28     	; 0x97c <__floatsisf+0x74>
 960:	96 e8       	ldi	r25, 0x86	; 134
 962:	86 2f       	mov	r24, r22
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	2a f0       	brmi	.+10     	; 0x974 <__floatsisf+0x6c>
 96a:	9a 95       	dec	r25
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	da f7       	brpl	.-10     	; 0x96a <__floatsisf+0x62>
 974:	88 0f       	add	r24, r24
 976:	96 95       	lsr	r25
 978:	87 95       	ror	r24
 97a:	97 f9       	bld	r25, 7
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_split3>:
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	90 58       	subi	r25, 0x80	; 128
 9d2:	44 0f       	add	r20, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	59 f0       	breq	.+22     	; 0x9ee <__fp_splitA+0x10>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__fp_splitA+0x1a>
 9dc:	47 95       	ror	r20

000009de <__fp_splitA>:
 9de:	88 0f       	add	r24, r24
 9e0:	97 fb       	bst	r25, 7
 9e2:	99 1f       	adc	r25, r25
 9e4:	61 f0       	breq	.+24     	; 0x9fe <__fp_splitA+0x20>
 9e6:	9f 3f       	cpi	r25, 0xFF	; 255
 9e8:	79 f0       	breq	.+30     	; 0xa08 <__fp_splitA+0x2a>
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	55 1f       	adc	r21, r21
 9f6:	f2 cf       	rjmp	.-28     	; 0x9dc <__fp_split3+0xe>
 9f8:	46 95       	lsr	r20
 9fa:	f1 df       	rcall	.-30     	; 0x9de <__fp_splitA>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__fp_splitA+0x30>
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	99 1f       	adc	r25, r25
 a06:	f1 cf       	rjmp	.-30     	; 0x9ea <__fp_splitA+0xc>
 a08:	86 95       	lsr	r24
 a0a:	71 05       	cpc	r23, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	08 94       	sec
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__mulsf3>:
 a20:	0e 94 23 05 	call	0xa46	; 0xa46 <__mulsf3x>
 a24:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 a28:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 a2c:	38 f0       	brcs	.+14     	; 0xa3c <__mulsf3+0x1c>
 a2e:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 a32:	20 f0       	brcs	.+8      	; 0xa3c <__mulsf3+0x1c>
 a34:	95 23       	and	r25, r21
 a36:	11 f0       	breq	.+4      	; 0xa3c <__mulsf3+0x1c>
 a38:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 a3c:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>
 a40:	11 24       	eor	r1, r1
 a42:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>

00000a46 <__mulsf3x>:
 a46:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_split3>
 a4a:	70 f3       	brcs	.-36     	; 0xa28 <__mulsf3+0x8>

00000a4c <__mulsf3_pse>:
 a4c:	95 9f       	mul	r25, r21
 a4e:	c1 f3       	breq	.-16     	; 0xa40 <__mulsf3+0x20>
 a50:	95 0f       	add	r25, r21
 a52:	50 e0       	ldi	r21, 0x00	; 0
 a54:	55 1f       	adc	r21, r21
 a56:	62 9f       	mul	r22, r18
 a58:	f0 01       	movw	r30, r0
 a5a:	72 9f       	mul	r23, r18
 a5c:	bb 27       	eor	r27, r27
 a5e:	f0 0d       	add	r31, r0
 a60:	b1 1d       	adc	r27, r1
 a62:	63 9f       	mul	r22, r19
 a64:	aa 27       	eor	r26, r26
 a66:	f0 0d       	add	r31, r0
 a68:	b1 1d       	adc	r27, r1
 a6a:	aa 1f       	adc	r26, r26
 a6c:	64 9f       	mul	r22, r20
 a6e:	66 27       	eor	r22, r22
 a70:	b0 0d       	add	r27, r0
 a72:	a1 1d       	adc	r26, r1
 a74:	66 1f       	adc	r22, r22
 a76:	82 9f       	mul	r24, r18
 a78:	22 27       	eor	r18, r18
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	62 1f       	adc	r22, r18
 a80:	73 9f       	mul	r23, r19
 a82:	b0 0d       	add	r27, r0
 a84:	a1 1d       	adc	r26, r1
 a86:	62 1f       	adc	r22, r18
 a88:	83 9f       	mul	r24, r19
 a8a:	a0 0d       	add	r26, r0
 a8c:	61 1d       	adc	r22, r1
 a8e:	22 1f       	adc	r18, r18
 a90:	74 9f       	mul	r23, r20
 a92:	33 27       	eor	r19, r19
 a94:	a0 0d       	add	r26, r0
 a96:	61 1d       	adc	r22, r1
 a98:	23 1f       	adc	r18, r19
 a9a:	84 9f       	mul	r24, r20
 a9c:	60 0d       	add	r22, r0
 a9e:	21 1d       	adc	r18, r1
 aa0:	82 2f       	mov	r24, r18
 aa2:	76 2f       	mov	r23, r22
 aa4:	6a 2f       	mov	r22, r26
 aa6:	11 24       	eor	r1, r1
 aa8:	9f 57       	subi	r25, 0x7F	; 127
 aaa:	50 40       	sbci	r21, 0x00	; 0
 aac:	9a f0       	brmi	.+38     	; 0xad4 <__mulsf3_pse+0x88>
 aae:	f1 f0       	breq	.+60     	; 0xaec <__mulsf3_pse+0xa0>
 ab0:	88 23       	and	r24, r24
 ab2:	4a f0       	brmi	.+18     	; 0xac6 <__mulsf3_pse+0x7a>
 ab4:	ee 0f       	add	r30, r30
 ab6:	ff 1f       	adc	r31, r31
 ab8:	bb 1f       	adc	r27, r27
 aba:	66 1f       	adc	r22, r22
 abc:	77 1f       	adc	r23, r23
 abe:	88 1f       	adc	r24, r24
 ac0:	91 50       	subi	r25, 0x01	; 1
 ac2:	50 40       	sbci	r21, 0x00	; 0
 ac4:	a9 f7       	brne	.-22     	; 0xab0 <__mulsf3_pse+0x64>
 ac6:	9e 3f       	cpi	r25, 0xFE	; 254
 ac8:	51 05       	cpc	r21, r1
 aca:	80 f0       	brcs	.+32     	; 0xaec <__mulsf3_pse+0xa0>
 acc:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 ad0:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>
 ad4:	5f 3f       	cpi	r21, 0xFF	; 255
 ad6:	e4 f3       	brlt	.-8      	; 0xad0 <__mulsf3_pse+0x84>
 ad8:	98 3e       	cpi	r25, 0xE8	; 232
 ada:	d4 f3       	brlt	.-12     	; 0xad0 <__mulsf3_pse+0x84>
 adc:	86 95       	lsr	r24
 ade:	77 95       	ror	r23
 ae0:	67 95       	ror	r22
 ae2:	b7 95       	ror	r27
 ae4:	f7 95       	ror	r31
 ae6:	e7 95       	ror	r30
 ae8:	9f 5f       	subi	r25, 0xFF	; 255
 aea:	c1 f7       	brne	.-16     	; 0xadc <__mulsf3_pse+0x90>
 aec:	fe 2b       	or	r31, r30
 aee:	88 0f       	add	r24, r24
 af0:	91 1d       	adc	r25, r1
 af2:	96 95       	lsr	r25
 af4:	87 95       	ror	r24
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret

00000afa <round>:
 afa:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_splitA>
 afe:	e8 f0       	brcs	.+58     	; 0xb3a <round+0x40>
 b00:	9e 37       	cpi	r25, 0x7E	; 126
 b02:	e8 f0       	brcs	.+58     	; 0xb3e <round+0x44>
 b04:	96 39       	cpi	r25, 0x96	; 150
 b06:	b8 f4       	brcc	.+46     	; 0xb36 <round+0x3c>
 b08:	9e 38       	cpi	r25, 0x8E	; 142
 b0a:	48 f4       	brcc	.+18     	; 0xb1e <round+0x24>
 b0c:	67 2f       	mov	r22, r23
 b0e:	78 2f       	mov	r23, r24
 b10:	88 27       	eor	r24, r24
 b12:	98 5f       	subi	r25, 0xF8	; 248
 b14:	f9 cf       	rjmp	.-14     	; 0xb08 <round+0xe>
 b16:	86 95       	lsr	r24
 b18:	77 95       	ror	r23
 b1a:	67 95       	ror	r22
 b1c:	93 95       	inc	r25
 b1e:	95 39       	cpi	r25, 0x95	; 149
 b20:	d0 f3       	brcs	.-12     	; 0xb16 <round+0x1c>
 b22:	b6 2f       	mov	r27, r22
 b24:	b1 70       	andi	r27, 0x01	; 1
 b26:	6b 0f       	add	r22, r27
 b28:	71 1d       	adc	r23, r1
 b2a:	81 1d       	adc	r24, r1
 b2c:	20 f4       	brcc	.+8      	; 0xb36 <round+0x3c>
 b2e:	87 95       	ror	r24
 b30:	77 95       	ror	r23
 b32:	67 95       	ror	r22
 b34:	93 95       	inc	r25
 b36:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_mintl>
 b3a:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_mpack>
 b3e:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__fp_szero>

00000b42 <__fp_mintl>:
 b42:	88 23       	and	r24, r24
 b44:	71 f4       	brne	.+28     	; 0xb62 <__fp_mintl+0x20>
 b46:	77 23       	and	r23, r23
 b48:	21 f0       	breq	.+8      	; 0xb52 <__fp_mintl+0x10>
 b4a:	98 50       	subi	r25, 0x08	; 8
 b4c:	87 2b       	or	r24, r23
 b4e:	76 2f       	mov	r23, r22
 b50:	07 c0       	rjmp	.+14     	; 0xb60 <__fp_mintl+0x1e>
 b52:	66 23       	and	r22, r22
 b54:	11 f4       	brne	.+4      	; 0xb5a <__fp_mintl+0x18>
 b56:	99 27       	eor	r25, r25
 b58:	0d c0       	rjmp	.+26     	; 0xb74 <__fp_mintl+0x32>
 b5a:	90 51       	subi	r25, 0x10	; 16
 b5c:	86 2b       	or	r24, r22
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	60 e0       	ldi	r22, 0x00	; 0
 b62:	2a f0       	brmi	.+10     	; 0xb6e <__fp_mintl+0x2c>
 b64:	9a 95       	dec	r25
 b66:	66 0f       	add	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	da f7       	brpl	.-10     	; 0xb64 <__fp_mintl+0x22>
 b6e:	88 0f       	add	r24, r24
 b70:	96 95       	lsr	r25
 b72:	87 95       	ror	r24
 b74:	97 f9       	bld	r25, 7
 b76:	08 95       	ret

00000b78 <__fp_mpack>:
 b78:	9f 3f       	cpi	r25, 0xFF	; 255
 b7a:	31 f0       	breq	.+12     	; 0xb88 <__fp_mpack_finite+0xc>

00000b7c <__fp_mpack_finite>:
 b7c:	91 50       	subi	r25, 0x01	; 1
 b7e:	20 f4       	brcc	.+8      	; 0xb88 <__fp_mpack_finite+0xc>
 b80:	87 95       	ror	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	88 0f       	add	r24, r24
 b8a:	91 1d       	adc	r25, r1
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	97 f9       	bld	r25, 7
 b92:	08 95       	ret

00000b94 <__tablejump2__>:
 b94:	ee 0f       	add	r30, r30
 b96:	ff 1f       	adc	r31, r31
 b98:	05 90       	lpm	r0, Z+
 b9a:	f4 91       	lpm	r31, Z
 b9c:	e0 2d       	mov	r30, r0
 b9e:	09 94       	ijmp

00000ba0 <__do_global_dtors>:
 ba0:	10 e0       	ldi	r17, 0x00	; 0
 ba2:	cc e5       	ldi	r28, 0x5C	; 92
 ba4:	d0 e0       	ldi	r29, 0x00	; 0
 ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <__do_global_dtors+0x10>
 ba8:	fe 01       	movw	r30, r28
 baa:	0e 94 ca 05 	call	0xb94	; 0xb94 <__tablejump2__>
 bae:	21 96       	adiw	r28, 0x01	; 1
 bb0:	ce 35       	cpi	r28, 0x5E	; 94
 bb2:	d1 07       	cpc	r29, r17
 bb4:	c9 f7       	brne	.-14     	; 0xba8 <__do_global_dtors+0x8>
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
